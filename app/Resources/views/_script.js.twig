{% set twig_message_delete_item = 'alert.warning.doYouWantToDeleteItem'|trans %}

<script type="text/javascript">
    var searchText = '';
    $(document).ready(function(){
        {# Text box clear button and action #}
        function tog(v) {return v? 'addClass' : 'removeClass';} 
        $(this).on('input', '.clearable', function(){$(this)[tog(this.value)]('x');})
            .on('mousemove', '.x', function( e ){$(this)[tog(this.offsetWidth-18 < e.clientX-this.getBoundingClientRect().left)]('onX');})
            .on('click', '.onX', function(){$(this).removeClass('x onX').val('').change();});
        
        $('#nav').affix({
              offset: {
                top: 0
              }
        });	
        
        $('#sidebar').affix({
              offset: {
                top: 20
              }
        });
    });
    
    function searchItems(searchInput, url_items, cont_items, currentPage)
    {
        var newSearchText = searchInput.val();
        if (searchText != newSearchText) {
            displayItems(url_items, cont_items, currentPage);
        }
        searchText = newSearchText;
    }
    
    function deleteItem(button, currentUrl, cont_items, currentPage)
    {
        var messageDeleteItem = '{{ twig_message_delete_item }}';
        var deleteActionUrl = button.attr('data-url');
        
        bootbox.confirm(messageDeleteItem, function(result) {
            if (result) {
                $.post(deleteActionUrl, function(response) {
                    if (response.success == true) {
                        displayItems(currentUrl, cont_items, currentPage);
                    } else{
                        bootbox.alert(response.message);
                    }
                }, 'json');
            } else {
                return true;
            }
        });
    }
    
    function simpleGet(url, param, callback) 
    {
        $.get(url, param, function(response) {
            if (response.success != true) {
                bootbox.alert(response.message);
            }
            
            if (callback != undefined) {
                setTimeout(function() {        
                    callback(response);
                }, 300);                
            }
        }, 'json');
    }
    
    function simpleDeleteItem(url, param, callback)
    {
        var messageDeleteItem = '{{ twig_message_delete_item }}';
        bootbox.confirm(messageDeleteItem, function(result) {
            if (result) {
                $.post(url, function(response) {
                    if (response.success != true) {
                        bootbox.alert(response.message);
                    }
                    
                    if (callback != undefined) {
                        setTimeout(function() {        
                            callback(response);
                        }, 300);                        
                    }
                }, 'json');
            } else {
                return true;
            }
        });
    }
    
    function displayPage(displayPageUrl, currentUrl, cont_items, currentPage, callback)
    {
        var headerContainer = $('#headerContainer');
        $.get(displayPageUrl, function(response) {
            if (response.success == true) {
                cont_items.html(response.content);
                headerContainer.hide();
                cont_items.find('.action-back').click(function(e) {
                    e.preventDefault();
                    $.get(currentUrl, {page: currentPage}, function(response) {
                        if (response.success == true) {
                            cont_items.html(response.content);
                            headerContainer.show();
                        } else {
                            bootbox.alert(response.message);
                            headerContainer.show();
                        }
                    }, 'json');                     
                });
            } else {
                bootbox.alert(response.message);
            }

            if (callback != undefined) {
                setTimeout(function() {        
                    callback(cont_items);
                }, 300);                    
            }
        }, 'json');
    }

    function postSimpleInlineForm(cont_items, form_item_name, callback)
    {
        var forms = ['[name="' + form_item_name + '"]'];
        $(forms.join(',')).submit(function(e){
            e.preventDefault();
            postForm($(this), function(response) {
                // If content has been defined then we display this form again, probably there is a form validation error
                if (response.content != undefined) {
                    cont_items.html(response.content);
                } else {
                    if (response.success == true) {
                        bootbox.alert('response.message');
                    } else {
                        bootbox.alert(response.message);
                    }
                    
                    if (callback != undefined) {
                        setTimeout(function() {        
                            callback(cont_items);
                        }, 300);                    
                    }
                }
            }, 'json');
            return false;
        });    
    }

    function postSimpleModalForm(response, form, form_item_cont, form_item_name, callback)
    {
        form.html(response.content);

        var forms = ['[name="' + form_item_name + '"]'];
        $(forms.join(',')).submit(function(e){
            e.preventDefault();
            postForm($(this), function(response) {
                // If content has been defined then we display this form again, probably there is a form validation error
                if (response.content != undefined) {
                    postSimpleModalForm(response, form, form_item_cont, form_item_name, callback);
                } else {
                    if (response.success == true) {
                        form.modal('toggle');
                    } else {
                        bootbox.alert(response.message);
                    }
                    
                    if (callback != undefined) {
                        setTimeout(function() {        
                            callback(response);
                        }, 300);
                    }
                }
            }, 'json');
            return false;
        });        
    }
    
    {#
    Display add/edit module form and returns the form as callback parameter if 
    form display correctly, prepare and handle the post action.
    #}
    function displayItemAddEditForm(button, form_item_name, form_item_cont, currentUrl, cont_items, currentPage, callback)
    {
        var url = button.attr('data-url');
        var form = $('#' + form_item_cont);
        $.get(url, function(response) {
            if (response.success == true) {
                postItemAddEditForm(response, form, form_item_name, form_item_cont, currentUrl, cont_items, currentPage);
                if (callback != undefined) {
                    setTimeout(function() {      
                        callback(form);
                    }, 300);
                }                 
            } else {
                bootbox.alert(response.message);
            }
        }, 'json');
    }
        
    function displaySimpleModalForm(url, param, form_item_cont, form_item_name, callback)
    {
        var form = $('#' + form_item_cont);
        $.get(url, param, function(response) {
            if (response.success == true) {
                form.modal('toggle');
                
                postSimpleModalForm(response, form, form_item_cont, form_item_name, callback);
            } else {
                bootbox.alert(response.message);
            }
        }, 'json');
    } 
        
    function postSimpleModalForm(response, form, form_item_cont, form_item_name, callback)
    {
        form.html(response.content);

        var forms = ['[name="' + form_item_name + '"]'];
        $(forms.join(',')).submit(function(e){
            e.preventDefault();
            postForm($(this), function(response) {
                // If content has been defined then we display this form again, probably there is a form validation error
                if (response.content != undefined) {
                    postSimpleModalForm(response, form, form_item_cont, form_item_name, callback);
                } else {
                    if (response.success == true) {
                        form.modal('toggle');
                    } else {
                        bootbox.alert(response.message);
                    }
                    
                    if (callback != undefined) {
                        setTimeout(function() {        
                            callback(response);
                        }, 300);
                    }
                }
            }, 'json');
            return false;
        });        
    }
        
    function postItemAddEditForm(response, form, form_item_name, form_item_cont, currentUrl, cont_items, currentPage)
    {
        form.html(response.content); 
        form.show();

        var forms = ['[name="' + form_item_name + '"]'];
        $(forms.join(',')).submit(function(e){
            e.preventDefault();
            postForm($(this), function(response) {
                // If content has been defined then we display this form again, probably there is a form validation error
                if (response.content != undefined) {
                    postItemAddEditForm(response, form, form_item_name, form_item_cont, currentUrl, cont_items, currentPage);
                } else {
                    if (response.success == true) {
                        $('#' + form_item_cont).modal('toggle');
                        displayItems(currentUrl, cont_items, currentPage);
                    } else {
                        bootbox.alert(response.message);
                    }
                }
            }, 'json');
            return false;
        });
    }
    
    function actionLink(button)
    {
        var url = button.attr('data-url');
        location.href = url;
    }
    
    function postItemAddEditStaticForm(form_item_name, url)
    {
        var forms = ['[name="' + form_item_name + '"]'];
        $(forms.join(',')).submit(function(e){
            e.preventDefault();
            postForm($(this), function(response) {
                // If content has been defined then we display this form again, probably there is a form validation error
                if (response.content != undefined) {
                    postItemAddEditForm(form_item_name);
                } else {
                    if (response.success == true) {
                        if (response.url != undefined) {
                            location.href = response.url;
                        } else {
                            if (response.message != undefined) {
                                bootbox.alert(response.message);
                            }
                        }                        
                    } else {
                        bootbox.alert(response.message);
                    }
                }
            }, 'json');
            return false;
        });
    }    
       
    function displayItem(button, cont_item)
    {
        var url = button.attr('data-url');
        
        $.get(url, function(response) {
            if (response.success == true) {
                cont_item.html(response.content);
                cont_item.show();
            } else {
                cont_item.modal('toggle');
                bootbox.alert(response.message);
            }
        }, 'json'); 
    }  

    function displayItems(url, cont_items, page)
    {
        var searchText = $("#input-search").val();
        var param;
        if ('' != searchText) {
            param = {searchText: searchText, page: page};
        } else {
            param = {page: page};
        }
        
        loadingMessage(true, cont_items);
        $.get(url, param, function(response) {
            loadingMessage(false, cont_items);
            if (response.success == true) {
                cont_items.html(response.content);
            } else {
                bootbox.alert(response.message);
            }
        }, 'json'); 
    }
    
    function sortAble(sortContainer, callback) {
        {# Sortable actions#}    
        sortContainer.sortable({
            connectWith: '.d-sortable-connected',
            dropOnEmpty: true,
            update: function(event, ui) {
                var sortIds = $(this).sortable('toArray').toString();
                var url = $(this).attr('data-url');
                
                simpleGet(url, {sortIds: sortIds}, callback);
            }
        });
    }    
    
    function loadingMessage(status, cont_items)
    {
        if (true == status) {
            cont_items.addClass("d-loading-background");
        } else {
            cont_items.removeClass("d-loading-background");
        }
    }
    
    function postForm($form, callback)
    {
      var values = {};
      var fields = {};
      
      // If CKEDITOR is defined in this form, then we update it content
      if (typeof CKEDITOR != 'undefined') {
          for (var instanceName in CKEDITOR.instances){
              CKEDITOR.instances[instanceName].updateElement();
          }
      }
          
      $.each($form.serializeArray(), function(i, field) {
          var fieldName = field.name;
          var fieldLength = fieldName.length;
          
          if ('[]' == fieldName.substr(fieldLength - 2, fieldLength)) {
              var fieldNewName = fieldName.substr(0, fieldLength - 2);
              if (fields[fieldNewName] == undefined) {
                  fields[fieldNewName] = 0;
              } else {
                  fields[fieldNewName] = fields[fieldNewName] + 1;
              }
              values[fieldNewName + '[' + fields[fieldNewName] + ']'] = field.value;  
          } else {
              values[fieldName] = field.value;
          }
      });
      
      // Throw the form values to the server!
      $.ajax({
          type        : $form.attr('method'),
          url         : $form.attr('action'),
          data        : values,
          success     : function(response) {
              callback(response);
          }
      });
    }    
</script>