<?php

namespace Saman\MediaBundle\Repository;

use Doctrine\ORM\EntityManager;

/**
 * Select2Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Select2Repository
{
    /**
     *
     * @var EntityManager $em
     */
    protected $em;
    
    /**
     *
     * @var string $class
     */
    protected $class;
    
    /**
     * 
     * @param \Doctrine\ORM\EntityManager $em
     */
    public function __construct(EntityManager $em, $class)
    {
        $this->em = $em;
        $this->class = $class;
    }
    
    /**
     * 
     * @param type $value
     * @return type
     */
    public function getCountSelect2Entities($value)
    {
        return $this->getSelect2Entities($value, null, null, true);
    }
    
    /**
     * 
     * @param type $value
     * @param type $page
     * @param type $limit
     * @return type
     */
    public function getSelect2Entities($value = null, $page = null, $limit = null, $justCount = false)
    {
        $queryBuilder = $this->em->createQueryBuilder();
        $queryBuilder->select('entity.title, entity.id')
            ->from($this->class, 'entity')
            ->where('entity.deleted = 0')
            ->orderBy('entity.title');
            
        // Include text filter
        if (null !== $value && !empty($value)) {
            $queryBuilder->andWhere('entity.title LIKE :searchText')
                ->setParameter('searchText', '%' . $value . '%');
        }        

        // Select count if page/limit not supplied
        if (true === $justCount) {
            $queryBuilder->select('COUNT(entity.id)');
            
            return $queryBuilder->getquery()->getSingleScalarResult();
        }
        
        // Fetch query object
        $query = $queryBuilder->getQuery();

        if (null !== $page && null !== $limit) {
            // Execute limits
            // Paginate inside this query
            $query->setMaxResults($limit);
            if ($limit * ($page - 1) > 0) {
                $query->setFirstResult($limit * $page);
            }
        }
        
        // Get results
        $results = $query->getScalarResult();
        $data = array();
        // Process results to view
        // @var UserProfileFieldElement $field 
        foreach ($results as $result) {
            $data[] = array(
                'id' => $result['id'],
                'text' => $result['title'],
            );
        }
        
        return $data;
    }
    
    /**
     * 
     * @param type $selection
     * @return type
     */
    public function getSelect2EntitiesByIds($selection)
    {
        $queryBuilder = $this->em->createQueryBuilder();
        $queryBuilder->select('entity.title, entity.id')
            ->from($this->class, 'entity')
            ->where('entity.id IN (:ids) AND entity.deleted = 0')
            ->orderBy('entity.title')
            ->setParameter('ids', $selection);

        // Fetch query object and get results
        $query = $queryBuilder->getQuery();
        $results = $query->getScalarResult();
        
        $data = array();
        // Reformat data for view
        foreach ($results as $result) {
            $data[] = array(
                'id' => $result['id'],
                'text' => $result['title'],
                );
        }
        
        return $data;
    }
}