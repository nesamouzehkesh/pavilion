<?php

namespace Saman\MediaBundle\Entity\Repository;

use Saman\Library\Doctrine\BaseEntityRepository;
use Doctrine\ORM\Query;

/**
 * MediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends BaseEntityRepository
{
    /**
     * Load item by its ID
     * 
     * @param type $id
     * @return type
     */
    public function loadItem($value, $key = 'id')
    {
        return $this->getItem($value, $key, true);
    }
        
    /**
     * General get item function, by default it just gets one or null object.
     * 
     * @param type $url
     * @param type $readOnly
     * @return type
     */
    public function getItem($value, $key = 'id', $loadItem = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('media')
            ->from('SamanMediaBundle:Media', 'media')
            ->where(sprintf('media.%s = :%s AND media.deleted = 0', $key, $key))
            ->setParameter($key, $value);

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult();
        
        return $result;
    }    
    
    /**
     * Get all items
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getItems($param = array(), $justQuery = true, $order = 'media.id', $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('media')
            ->from('SamanMediaBundle:Media', 'media')
            ->where('media.deleted = 0')
            ->search('media.title', $param)
            ->orderBy($order);
        
        $query = $qb->getQuery();
        if ($justQuery) {
            return $query;
        } else {
            $result = $query->getResult($hydrationMode);
            return $result;
        }
    }
    
    /**
     * Get items by ID
     * 
     * @param type $ids
     * @param type $readOnly
     * @param type $justQuery
     * @return type
     */
    public function getItemsByID($ids, $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('media')
            ->from('SamanMediaBundle:Media', 'media')
            ->where('media.id IN (:ids)')
            ->setParameter('ids', $ids);
        
        return $qb->getQuery()->getResult($hydrationMode);
    }
}