<?php

namespace Saman\CmsBundle\Entity\Repository;

use Saman\Library\Doctrine\BaseEntityRepository;
use Doctrine\ORM\Query;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends BaseEntityRepository
{   
    /**
     * 
     * @param type $url
     * @return type
     */
    public function getPageForView($url)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('page.title, page.content')
            ->from('SamanCmsBundle:Page', 'page')
            ->where('page.url IN (:urls) AND page.deleted = 0')
            ->setParameter('urls', array($url, sprintf('/%s', $url)));

        $result = $qb->getQuery()->getScalarResult();
        $row = reset($result);
        
        return $row? $row : null;
    }
    
    /**
     * 
     * @return type
     */
    public function getPagesListForView()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('page.url, page.title')
            ->from('SamanCmsBundle:Page', 'page')
            ->where('page.deleted = 0')
            ->orderBy('page.title');
        
        //$ids = array_map('current', $result);
        //$ids = array_column($result, "id");
        
        return $qb->getQuery()->getScalarResult();
    }
        
    /**
     * Get one or null pages
     * 
     * @param type $value
     * @param type $key
     * @return NULL|Page
     */
    public function getPage($value, $key = 'id')
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('page')
            ->from('SamanCmsBundle:Page', 'page')
            ->where(sprintf('page.%s = :%s AND page.deleted = 0', $key, $key))
            ->setParameter($key, $value);

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult();
        
        return $result;
    }    
    
    /**
     * Get all pages
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getPages($param = array(), $justQuery = true, $order = 'page.url', $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('page')
            ->from('SamanCmsBundle:Page', 'page')
            ->where('page.deleted = 0')
            ->search('page.title', $param)
            ->orderBy($order);
        
        $query = $qb->getQuery();
        if ($justQuery) {
            return $query;
        } else {
            $result = $query->getResult($hydrationMode);
            return $result;
        }
    }
}