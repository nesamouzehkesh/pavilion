<?php

namespace Saman\CmsBundle\Repository;

use Symfony\Component\HttpFoundation\Request;
use Saman\Library\Doctrine\BaseEntityRepository;
use Saman\Library\Map\EntityMap;
use Doctrine\ORM\Query;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends BaseEntityRepository
{
    public function loadPage($url, Request $request)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('
                page.title,
                page.icon,
                page.content,
                page.url,
                page.createdTime,
                page.modifiedTime,
                theme.content as themeContent,
                theme.staticContent as themeStaticContent
            ')
            ->from(EntityMap::CMS_PAGE, 'page')
            ->where('page.url IN (:urls) AND page.deleted = 0')
            ->leftJoin('page.theme', 'theme', 'WITH', 'theme.deleted = 0')
            ->setParameter('urls', array($url, sprintf('/%s', $url)));

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult(Query::HYDRATE_ARRAY);
        
        return $result;
    }
    
    /**
     * Load item by its ID
     * 
     * @param type $id
     * @return type
     */
    public function loadItem($value, $key = 'id')
    {
        return $this->getItem($value, $key, true);
    }
        
    /**
     * General get item function, by default it just gets one or null object.
     * 
     * @param type $url
     * @param type $readOnly
     * @return type
     */
    public function getItem($value, $key = 'id', $loadItem = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('page')
            ->from(EntityMap::CMS_PAGE, 'page')
            ->where(sprintf('page.%s = :%s AND page.deleted = 0', $key, $key))
            ->setParameter($key, $value);

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult();
        
        return $result;
    }    
    
    /**
     * Get all items
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getItems($param = array(), $justQuery = true, $order = 'page.url', $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('page')
            ->from(EntityMap::CMS_PAGE, 'page')
            ->where('page.deleted = 0')
            ->search('page.title', $param)
            ->orderBy($order);
        
        $query = $qb->getQuery();
        if ($justQuery) {
            return $query;
        } else {
            $result = $query->getResult($hydrationMode);
            return $result;
        }
    }
}