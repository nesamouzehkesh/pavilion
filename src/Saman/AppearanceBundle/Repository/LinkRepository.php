<?php

namespace Saman\AppearanceBundle\Repository;

use Doctrine\ORM\Query;
use Saman\Library\Doctrine\BaseEntityRepository;
use Saman\Library\Map\EntityMap;

/**
 * LinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LinkRepository extends BaseEntityRepository
{
    /**
     * Load item by its ID
     * 
     * @param type $id
     * @return type
     */
    public function loadLink($value, $key = 'id')
    {
        return $this->getLink($value, $key, true);
    }
        
    /**
     * General get item function, by default it just gets one or null object.
     * 
     * @param type $url
     * @param type $readOnly
     * @return type
     */
    public function getLink($value, $key = 'id', $loadLink = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        if ($loadLink) {
            $qb->select('link')
                ->from(EntityMap::APPEARANCE_LINK, 'link')
                ->where(sprintf('link.%s = :%s AND link.deleted = 0', $key, $key))
                ->setParameter($key, $value);
        } else {
            $qb->select('link')
                ->from(EntityMap::APPEARANCE_LINK, 'link')
                ->where(sprintf('link.%s = :%s AND link.deleted = 0', $key, $key))
                ->setParameter($key, $value);
        }

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult();
        
        return $result;
    }    
    
    /**
     * Get all items
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getLinks($param = array(), $justQuery = true, $order = 'link.id', $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('link')
            ->from(EntityMap::APPEARANCE_LINK, 'link')
            ->where('link.deleted = 0')
            ->search('link.title', $param)
            ->orderBy($order);
        
        $query = $qb->getQuery();
        if ($justQuery) {
            return $query;
        } else {
            $result = $query->getResult($hydrationMode);
            return $result;
        }
    }
}