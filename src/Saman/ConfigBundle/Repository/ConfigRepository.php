<?php

namespace Saman\ConfigBundle\Repository;

use Saman\Library\Doctrine\BaseEntityRepository;
use Saman\Library\Map\EntityMap;
use Saman\UserBundle\Entity\User;
use Saman\ConfigBundle\Entity\Config;

/**
 * ConfigRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConfigRepository extends BaseEntityRepository
{
    /**
     * 
     * @param type $configDefaultParameters
     * @return type
     */
    public function getPublicConfig($configDefaultParameters)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('config')
            ->from(EntityMap::CONFIG_CONFIG, 'config')
            ->where('config.user IS NULL AND config.visibility = :visibility AND config.deleted = 0')
            ->setParameter('visibility', Config::VISIBILITY_PUBLIC);

        $query = $qb->getQuery();
        $publicConfig = $query->getOneOrNullResult();
        if (null === $publicConfig) {
            return $this->createDefaultPublicConfig($configDefaultParameters);
        } else {
            return $publicConfig;
        }
    }
    
    /**
     * 
     * @param User $user
     * @param type $configDefaultParameters
     * @return type
     */
    public function getPrivateConfig(User $user, $configDefaultParameters)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('config')
            ->from(EntityMap::CONFIG_CONFIG, 'config')
            ->where('config.user = :user AND config.visibility = :visibility AND config.deleted = 0')
            ->setParameter('visibility', Config::VISIBILITY_PRIVATE)
            ->setParameter('user', $user);    

        $query = $qb->getQuery();
        $privateConfig = $query->getOneOrNullResult();
        if (null === $privateConfig) {
            return $this->createDefaultPrivateConfig(
                $user, 
                $configDefaultParameters
                );
        } else {
            return $privateConfig;
        }
    }    
    
    /**
     * 
     * @param User $user
     * @param type $configDefaultParameters
     * @return type
     */
    public function getUserConfigs(User $user, $configDefaultParameters)
    {
        $publicConfig = $this->getPublicConfig($configDefaultParameters);
        $privateConfig = $this->getPrivateConfig($user, $configDefaultParameters);

        return array_merge($publicConfig->getOptions(), $privateConfig->getOptions());
    }    
    
    /**
     * 
     * @param type $user
     * @param type $configDefaultParameters
     */
    public function updateUserConfigs(User $user, $configInputOptions, $configDefaultParameters)
    {
        $em = $this->getEntityManager();
        $publicConfigOptions = Config::generateConfigOptions(
            $configDefaultParameters, 
            array('public'), 
            $configInputOptions
            );
        $publicConfig = $this->getPublicConfig($configDefaultParameters);
        $publicConfig->setOptions($publicConfigOptions);
        $em->persist($publicConfig);
        
        $privateConfigOptions = Config::generateConfigOptions(
            $configDefaultParameters, 
            array('private'), 
            $configInputOptions
            );
        $privateConfig = $this->getPrivateConfig($user, $configDefaultParameters);
        $privateConfig->setOptions($privateConfigOptions);
        $em->persist($privateConfig);
        
        $em->flush();        
    }
    
    /**
     * 
     * @param type $configDefaultParameters
     */
    private function createDefaultPublicConfig($configDefaultParameters)
    {
        $em = $this->getEntityManager();
        $publicConfigOptions = Config::generateConfigOptions(
            $configDefaultParameters, 
            array('public')
            );
        
        $publicConfig = new Config();
        $publicConfig->setOptions($publicConfigOptions);
        $publicConfig->setPublic();
        $em->persist($publicConfig);
        $em->flush();
        
        return $publicConfig;
    }
    
    /**
     * 
     * @param User $user
     * @param type $configDefaultParameters
     */
    private function createDefaultPrivateConfig(User $user, $configDefaultParameters)
    {
        $em = $this->getEntityManager();
        $privateConfigOptions = Config::generateConfigOptions(
            $configDefaultParameters, 
            array('private')
            );
        
        $privateConfig = new Config();
        $privateConfig->setOptions($privateConfigOptions);
        $privateConfig->setUser($user);
        $privateConfig->setPrivate();
        $em->persist($privateConfig);
        $em->flush();
        
        return $privateConfig;        
    }
}