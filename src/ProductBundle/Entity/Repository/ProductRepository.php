<?php

namespace ProductBundle\Entity\Repository;

use Doctrine\ORM\Query;
use Library\Doctrine\BaseEntityRepository;
use Library\Components\MediaHandler;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends BaseEntityRepository
{   
    /**
     * 
     * @param int $id
     * @return type
     */
    public function getProductForView($id, MediaHandler $mediaHandler = null)
    {
        $qb = $this->getQueryBuilder()
            ->select(''
                . 'product.id, '
                . 'product.title, '
                . 'product.image,'
                . 'product.images,'
                . 'product.description,'
                . 'product.price'
                )
            ->from('ProductBundle:Product', 'product')
            ->where('product.id = :id AND product.deleted = 0')
            ->setParameter('id', $id);

        $result = $qb->getQuery()->getScalarResult();
        $product = reset($result);

        if ($mediaHandler instanceof MediaHandler) {
            $product['image'] = $mediaHandler->getBrowserMediaArray($product['image']);
            $product['images'] = $mediaHandler->getBrowserMediaArray($product['images']);
        }
        
        return $product;
    }

    /**
     * 
     * @return type
     */
    public function getProductsListForView(MediaHandler $mediaHandler = null)
    {
        $qb = $this->getQueryBuilder()
            ->select(''
                . 'product.id, '
                . 'product.title, '
                . 'product.image,'
                . 'product.description,'
                . 'product.price'
                )
            ->from('ProductBundle:Product', 'product')
            ->where('product.deleted = 0')
            ->orderBy('product.title');
        
        $products = $qb->getQuery()->getScalarResult();
        if ($mediaHandler instanceof MediaHandler) {
            foreach ($products as $key => $product) {
                $image = $mediaHandler->getBrowserMediaArray($product['image']);
                $products[$key]['image'] = $image;
            }
        }
        
        return $products;
    }
        
    /**
     * Get one or null product
     * 
     * @param type $value
     * @param type $key
     * @return \ProductBundle\Entity\Product
     */
    public function getProduct($value, $key = 'id')
    {
        $qb = $this->getQueryBuilder()
            ->select('product')
            ->from('ProductBundle:Product', 'product')
            ->where(sprintf('product.%s = :%s AND product.deleted = 0', $key, $key))
            ->setParameter($key, $value);

        return $qb->getQuery()->getOneOrNullResult();
    }    
    
    /**
     * Get all products
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getProducts($param = array(), $justQuery = true, $order = 'product.id', $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder()
            ->select('product')
            ->from('ProductBundle:Product', 'product')
            ->where('product.deleted = 0')
            ->search('product.title', $param)
            ->orderBy($order);
        
        if (isset($param['categoryId'])) {
            $qb->leftJoin('product.categories', 'category', 'WITH', 'category.deleted = 0')
                ->where('category.id = :categoryId')
                ->setParameter('categoryId', $param['categoryId']);
        }
        
        $query = $qb->getQuery();
        if (!$justQuery) {
            return $query->getResult($hydrationMode);        
        }
        
        return $query;
    }
}