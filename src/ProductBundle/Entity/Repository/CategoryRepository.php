<?php

namespace ProductBundle\Entity\Repository;

use Library\Doctrine\BaseEntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends BaseEntityRepository
{   
    /**
     * Get all categories
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getCategories($loadOrders = false, $param = array(), $order = 'c.id')
    {
        $qb = $this->getQueryBuilder()
            ->select('c')
            ->from('ProductBundle:Category', 'c')
            ->where('c.deleted = 0')
            ->orderBy($order);
        
        if ($loadOrders) {
            $qb->leftJoin('c.products', 'p', 'p.deleted = 0');
        }
        
        return $qb->getQuery()->getResult();        
    }
    
    /**
     * 
     * @param type $categoryId
     * @return type
     */
    public function countCategoryProducts($categoryId)
    {
        $qb = $this->getQueryBuilder()
            ->select('count(p.id)')
            ->from('ProductBundle:Category', 'c')
            ->leftJoin('c.products', 'p', 'p.deleted = 0')
            ->where('c.deleted = 0 AND c.id = :id')
            ->setParameter('id', $categoryId);
        
        return intval($qb->getQuery()->getSingleScalarResult());
    }
    
    /**
     * Get one or null category
     * 
     * @param type $value
     * @param type $key
     * @return \ProductBundle\Entity\Category
     */
    public function getCategory($value, $key = 'id')
    {
        $qb = $this->getQueryBuilder()
            ->select('c')
            ->from('ProductBundle:Category', 'c')
            ->where(sprintf('c.%s = :%s AND c.deleted = 0', $key, $key))
            ->setParameter($key, $value);

        return $qb->getQuery()->getOneOrNullResult();
    }      
}