<?php

namespace ShoppingBundle\Entity\Repository;

use Doctrine\ORM\Query;
use Library\Doctrine\BaseEntityRepository;
use UserBundle\Entity\User;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends BaseEntityRepository
{
    /**
     * General get item function, by default it just gets one or null object.
     * 
     * @param type $value
     * @param type $key
     * @return type
     */
    public function getOrder($value, $key = 'id')
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('o')
            ->from('ShoppingBundle:Order', 'o')
            ->where(sprintf('o.%s = :%s AND o.deleted = 0', $key, $key))
            ->setParameter($key, $value);

        $query = $qb->getQuery();
        
        return $query->getOneOrNullResult();
    }    
    
    /**
     * Get all items
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getOrders($param = array(), $justQuery = true, $order = 'order.id', $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('o')
            ->from('ShoppingBundle:Order', 'o')
            ->where('o.deleted = 0')
            //->search('o.title', $param)
            ->orderBy($order);
        
        $query = $qb->getQuery();
        if ($justQuery) {
            return $query;
        } else {
            $result = $query->getResult($hydrationMode);
            return $result;
        }
    }
    
    /**
     * Get all user's orders
     * 
     * @param User $user
     * @param type $readOnly
     * @return type
     */
    public function getUserOrders(User $user, $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('o')
            ->from('ShoppingBundle:Order', 'o')
            ->leftJoin('o.progresses', 'op', 'WITH', 'op.deleted = 0')
            ->leftJoin('op.progress', 'p', 'WITH', 'p.deleted = 0')
            ->where('o.deleted = 0 AND o.user = :user')
            ->setParameter('user', $user);
        
        return $qb->getQuery()->getResult();
    }
}