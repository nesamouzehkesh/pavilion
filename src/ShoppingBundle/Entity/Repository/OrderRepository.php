<?php

namespace ShoppingBundle\Entity\Repository;

use Doctrine\ORM\Query;
use Library\Doctrine\BaseEntityRepository;
use UserBundle\Entity\User;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends BaseEntityRepository
{
    /**
     * 
     * @param type $orderId
     * @param User $user
     * @return type
     */
    public function getOrder($orderId, User $user = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('o')
            ->from('ShoppingBundle:Order', 'o')
            ->where('o.id = :id AND o.deleted = 0')
            ->setParameter('id', $orderId);
        
        if ($user instanceof User) {
            $qb->andWhere('o.user = :user');
            $qb->setParameter('user', $user);
        }

        return $qb->getQuery()->getOneOrNullResult();
    }
    
    /**
     * Get all user's orders
     * 
     * @param User $user
     * @param type $params
     * @param type $justQuery
     * @param type $readOnly
     * @return type
     */
    public function getUserOrders(User $user, $params = array(), $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('o')
            ->from('ShoppingBundle:Order', 'o')
            ->leftJoin('o.progresses', 'op', 'WITH', 'op.deleted = 0')
            ->leftJoin('op.progress', 'p', 'WITH', 'p.deleted = 0')
            ->where('o.deleted = 0 AND o.user = :user')
            ->setParameter('user', $user);
        
        // If we use this it will generate just array
        //return $qb->getQuery()->getResult($hydrationMode);
        return $qb->getQuery()->getResult();
    }
    
    /**
     * Get all user's orders
     * 
     * @param type $params
     * @param type $justQuery
     * @param type $readOnly
     * @return type
     */
    public function getOrders($params = array(), $justQuery = true, $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder();
        
        $qb->select('o')
            ->from('ShoppingBundle:Order', 'o')
            ->leftJoin('o.user', 'ou')
            ->leftJoin('o.progresses', 'op', 'WITH', 'op.deleted = 0')
            ->leftJoin('op.progress', 'p', 'WITH', 'p.deleted = 0')
            ->where('o.deleted = 0')
            ->search('o.id', $params, 'int');
        
        if (isset($params['progressFilter'])) {
            $qb->andWhere('o.progressesStatus = :status');
            $qb->setParameter('status', $params['progressFilter']);
        }
        
        if ($justQuery) {
            return $qb->getQuery();
        }
        
        // If we use this it will generate just array
        //return $qb->getQuery()->getResult($hydrationMode);
        return $qb->getQuery()->getResult();
    }
}