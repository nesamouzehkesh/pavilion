<?php

namespace CmsBundle\Entity\Repository;

use Library\Doctrine\BaseEntityRepository;
use Doctrine\ORM\Query;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends BaseEntityRepository
{   
    /**
     * 
     * @param type $url
     * @return type
     */
    public function getPageForView($url)
    {
        $qb = $this->getQueryBuilder()
            ->select('
                page.title,
                page.icon,
                page.content,
                page.url,
                page.createdTime,
                page.modifiedTime
                ')
            ->from('CmsBundle:Page', 'page')
            ->where('page.url IN (:urls) AND page.deleted = 0')
            ->setParameter('urls', array($url, sprintf('/%s', $url)));

        $result = $qb->getQuery()->getScalarResult();
        $row = reset($result);
        
        return $row? $row : null;
    }
    
    /**
     * 
     * @return type
     */
    public function getPagesListForView()
    {
        $qb = $this->getQueryBuilder()
            ->select('page.url, page.title')
            ->from('CmsBundle:Page', 'page')
            ->where('page.deleted = 0')
            ->orderBy('page.title');
        
        return $qb->getQuery()->getScalarResult();
    }
        
    /**
     * Get one or null pages
     * 
     * @param type $value
     * @param type $key
     * @return NULL|Page
     */
    public function getPage($value, $key = 'id')
    {
        $qb = $this->getQueryBuilder()
            ->select('page')
            ->from('CmsBundle:Page', 'page')
            ->where(sprintf('page.%s = :%s AND page.deleted = 0', $key, $key))
            ->setParameter($key, $value);

        return $qb->getQuery()->getOneOrNullResult();
    }    
    
    /**
     * Get all pages
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getPages($param = array(), $justQuery = true, $order = 'page.id', $readOnly = true)
    {
        $hydrationMode = $readOnly? Query::HYDRATE_ARRAY : null;
        $qb = $this->getQueryBuilder()
            ->select('page')
            ->from('CmsBundle:Page', 'page')
            ->where('page.deleted = 0')
            ->search('page.title', $param)
            ->orderBy($order);
        
        $query = $qb->getQuery();
        if (!$justQuery) {
            return $query->getResult($hydrationMode);        
        }
        
        return $query;
    }
}